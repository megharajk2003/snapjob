{"dependencies":[{"name":"./timeoutManager.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":24},"end":{"line":2,"column":59,"index":83}}],"key":"pyQHMhdGxfRLqgunhFS/8/ELubI=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.createNotifyManager = createNotifyManager;\n  exports.notifyManager = exports.defaultScheduler = void 0;\n  var _timeoutManager = require(_dependencyMap[0], \"./timeoutManager.js\");\n  // src/notifyManager.ts\n\n  var defaultScheduler = exports.defaultScheduler = _timeoutManager.systemSetTimeoutZero;\n  function createNotifyManager() {\n    let queue = [];\n    let transactions = 0;\n    let notifyFn = callback => {\n      callback();\n    };\n    let batchNotifyFn = callback => {\n      callback();\n    };\n    let scheduleFn = defaultScheduler;\n    const schedule = callback => {\n      if (transactions) {\n        queue.push(callback);\n      } else {\n        scheduleFn(() => {\n          notifyFn(callback);\n        });\n      }\n    };\n    const flush = () => {\n      const originalQueue = queue;\n      queue = [];\n      if (originalQueue.length) {\n        scheduleFn(() => {\n          batchNotifyFn(() => {\n            originalQueue.forEach(callback => {\n              notifyFn(callback);\n            });\n          });\n        });\n      }\n    };\n    return {\n      batch: callback => {\n        let result;\n        transactions++;\n        try {\n          result = callback();\n        } finally {\n          transactions--;\n          if (!transactions) {\n            flush();\n          }\n        }\n        return result;\n      },\n      /**\n       * All calls to the wrapped function will be batched.\n       */\n      batchCalls: callback => {\n        return (...args) => {\n          schedule(() => {\n            callback(...args);\n          });\n        };\n      },\n      schedule,\n      /**\n       * Use this method to set a custom notify function.\n       * This can be used to for example wrap notifications with `React.act` while running tests.\n       */\n      setNotifyFunction: fn => {\n        notifyFn = fn;\n      },\n      /**\n       * Use this method to set a custom function to batch notifications together into a single tick.\n       * By default React Query will use the batch function provided by ReactDOM or React Native.\n       */\n      setBatchNotifyFunction: fn => {\n        batchNotifyFn = fn;\n      },\n      setScheduler: fn => {\n        scheduleFn = fn;\n      }\n    };\n  }\n  var notifyManager = exports.notifyManager = createNotifyManager();\n});","lineCount":88,"map":[[7,2,2,0],[7,6,2,0,"_timeoutManager"],[7,21,2,0],[7,24,2,0,"require"],[7,31,2,0],[7,32,2,0,"_dependencyMap"],[7,46,2,0],[8,2,1,0],[10,2,3,0],[10,6,3,4,"defaultScheduler"],[10,22,3,20],[10,25,3,20,"exports"],[10,32,3,20],[10,33,3,20,"defaultScheduler"],[10,49,3,20],[10,52,3,23,"systemSetTimeoutZero"],[10,88,3,43],[11,2,4,0],[11,11,4,9,"createNotifyManager"],[11,30,4,28,"createNotifyManager"],[11,31,4,28],[11,33,4,31],[12,4,5,2],[12,8,5,6,"queue"],[12,13,5,11],[12,16,5,14],[12,18,5,16],[13,4,6,2],[13,8,6,6,"transactions"],[13,20,6,18],[13,23,6,21],[13,24,6,22],[14,4,7,2],[14,8,7,6,"notifyFn"],[14,16,7,14],[14,19,7,18,"callback"],[14,27,7,26],[14,31,7,31],[15,6,8,4,"callback"],[15,14,8,12],[15,15,8,13],[15,16,8,14],[16,4,9,2],[16,5,9,3],[17,4,10,2],[17,8,10,6,"batchNotifyFn"],[17,21,10,19],[17,24,10,23,"callback"],[17,32,10,31],[17,36,10,36],[18,6,11,4,"callback"],[18,14,11,12],[18,15,11,13],[18,16,11,14],[19,4,12,2],[19,5,12,3],[20,4,13,2],[20,8,13,6,"scheduleFn"],[20,18,13,16],[20,21,13,19,"defaultScheduler"],[20,37,13,35],[21,4,14,2],[21,10,14,8,"schedule"],[21,18,14,16],[21,21,14,20,"callback"],[21,29,14,28],[21,33,14,33],[22,6,15,4],[22,10,15,8,"transactions"],[22,22,15,20],[22,24,15,22],[23,8,16,6,"queue"],[23,13,16,11],[23,14,16,12,"push"],[23,18,16,16],[23,19,16,17,"callback"],[23,27,16,25],[23,28,16,26],[24,6,17,4],[24,7,17,5],[24,13,17,11],[25,8,18,6,"scheduleFn"],[25,18,18,16],[25,19,18,17],[25,25,18,23],[26,10,19,8,"notifyFn"],[26,18,19,16],[26,19,19,17,"callback"],[26,27,19,25],[26,28,19,26],[27,8,20,6],[27,9,20,7],[27,10,20,8],[28,6,21,4],[29,4,22,2],[29,5,22,3],[30,4,23,2],[30,10,23,8,"flush"],[30,15,23,13],[30,18,23,16,"flush"],[30,19,23,16],[30,24,23,22],[31,6,24,4],[31,12,24,10,"originalQueue"],[31,25,24,23],[31,28,24,26,"queue"],[31,33,24,31],[32,6,25,4,"queue"],[32,11,25,9],[32,14,25,12],[32,16,25,14],[33,6,26,4],[33,10,26,8,"originalQueue"],[33,23,26,21],[33,24,26,22,"length"],[33,30,26,28],[33,32,26,30],[34,8,27,6,"scheduleFn"],[34,18,27,16],[34,19,27,17],[34,25,27,23],[35,10,28,8,"batchNotifyFn"],[35,23,28,21],[35,24,28,22],[35,30,28,28],[36,12,29,10,"originalQueue"],[36,25,29,23],[36,26,29,24,"forEach"],[36,33,29,31],[36,34,29,33,"callback"],[36,42,29,41],[36,46,29,46],[37,14,30,12,"notifyFn"],[37,22,30,20],[37,23,30,21,"callback"],[37,31,30,29],[37,32,30,30],[38,12,31,10],[38,13,31,11],[38,14,31,12],[39,10,32,8],[39,11,32,9],[39,12,32,10],[40,8,33,6],[40,9,33,7],[40,10,33,8],[41,6,34,4],[42,4,35,2],[42,5,35,3],[43,4,36,2],[43,11,36,9],[44,6,37,4,"batch"],[44,11,37,9],[44,13,37,12,"callback"],[44,21,37,20],[44,25,37,25],[45,8,38,6],[45,12,38,10,"result"],[45,18,38,16],[46,8,39,6,"transactions"],[46,20,39,18],[46,22,39,20],[47,8,40,6],[47,12,40,10],[48,10,41,8,"result"],[48,16,41,14],[48,19,41,17,"callback"],[48,27,41,25],[48,28,41,26],[48,29,41,27],[49,8,42,6],[49,9,42,7],[49,18,42,16],[50,10,43,8,"transactions"],[50,22,43,20],[50,24,43,22],[51,10,44,8],[51,14,44,12],[51,15,44,13,"transactions"],[51,27,44,25],[51,29,44,27],[52,12,45,10,"flush"],[52,17,45,15],[52,18,45,16],[52,19,45,17],[53,10,46,8],[54,8,47,6],[55,8,48,6],[55,15,48,13,"result"],[55,21,48,19],[56,6,49,4],[56,7,49,5],[57,6,50,4],[58,0,51,0],[59,0,52,0],[60,6,53,4,"batchCalls"],[60,16,53,14],[60,18,53,17,"callback"],[60,26,53,25],[60,30,53,30],[61,8,54,6],[61,15,54,13],[61,16,54,14],[61,19,54,17,"args"],[61,23,54,21],[61,28,54,26],[62,10,55,8,"schedule"],[62,18,55,16],[62,19,55,17],[62,25,55,23],[63,12,56,10,"callback"],[63,20,56,18],[63,21,56,19],[63,24,56,22,"args"],[63,28,56,26],[63,29,56,27],[64,10,57,8],[64,11,57,9],[64,12,57,10],[65,8,58,6],[65,9,58,7],[66,6,59,4],[66,7,59,5],[67,6,60,4,"schedule"],[67,14,60,12],[68,6,61,4],[69,0,62,0],[70,0,63,0],[71,0,64,0],[72,6,65,4,"setNotifyFunction"],[72,23,65,21],[72,25,65,24,"fn"],[72,27,65,26],[72,31,65,31],[73,8,66,6,"notifyFn"],[73,16,66,14],[73,19,66,17,"fn"],[73,21,66,19],[74,6,67,4],[74,7,67,5],[75,6,68,4],[76,0,69,0],[77,0,70,0],[78,0,71,0],[79,6,72,4,"setBatchNotifyFunction"],[79,28,72,26],[79,30,72,29,"fn"],[79,32,72,31],[79,36,72,36],[80,8,73,6,"batchNotifyFn"],[80,21,73,19],[80,24,73,22,"fn"],[80,26,73,24],[81,6,74,4],[81,7,74,5],[82,6,75,4,"setScheduler"],[82,18,75,16],[82,20,75,19,"fn"],[82,22,75,21],[82,26,75,26],[83,8,76,6,"scheduleFn"],[83,18,76,16],[83,21,76,19,"fn"],[83,23,76,21],[84,6,77,4],[85,4,78,2],[85,5,78,3],[86,2,79,0],[87,2,80,0],[87,6,80,4,"notifyManager"],[87,19,80,17],[87,22,80,17,"exports"],[87,29,80,17],[87,30,80,17,"notifyManager"],[87,43,80,17],[87,46,80,20,"createNotifyManager"],[87,65,80,39],[87,66,80,40],[87,67,80,41],[88,0,80,42],[88,3]],"functionMap":{"names":["<global>","createNotifyManager","notifyFn","batchNotifyFn","schedule","scheduleFn$argument_0","flush","batchNotifyFn$argument_0","originalQueue.forEach$argument_0","batch","batchCalls","<anonymous>","schedule$argument_0","setNotifyFunction","setBatchNotifyFunction","setScheduler"],"mappings":"AAA;ACG;iBCG;GDE;sBEC;GFE;mBGE;iBCI;ODE;GHE;gBKC;iBDI;sBEC;gCCC;WDE;SFC;OCC;GLE;WQE;KRY;gBSI;aCC;iBCC;SDE;ODC;KTC;uBYM;KZE;4BaK;KbE;kBcC;KdE;CDE"}},"type":"js/module"}]}